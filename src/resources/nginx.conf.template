# Variables
# TOKEN_FILE_PATH
# PROXY_BUFFER_SIZE
# PROXY_BUFFERS
# PROXY_BUSY_BUFFERS_SIZE
# LARGE_CLIENT_HEADER_BUFFERS
# UPSTREAM_HOST
# BASE_REWRITE_PATH
# TOKEN_CACHE_EXPIRATION_SECONDS
# MAX_AUTH_RETRY_ATTEMPTS

events {
}

http {

    lua_shared_dict cache 1m;

    init_by_lua_block {

        local function getenv_with_default(env_var, default)
            local value = os.getenv(env_var)
            if not value or value == "" then
                return default
            end
            return value
        end

        local token_file_path = getenv_with_default("TOKEN_FILE_PATH", "/config/token")
        local token_cache_expiration = tonumber(getenv_with_default("TOKEN_CACHE_EXPIRATION_SECONDS", "300"))

        function read_token()
            local file = io.open(token_file_path, "r")
            if not file then
                ngx.log(ngx.ERR, "Token file not found: " .. token_file_path)
                return nil
            end

            local token = file:read("*a")
            file:close()

            if not token or token == "" then
                ngx.log(ngx.ERR, "Token file is empty or invalid")
                return nil
            end

            return token
        end

        function get_auth_header(clear_cache)
            clear_cache = clear_cache or false
            local auth_header = ngx.shared.cache:get("auth_header")

            if not clear_cache and auth_header then
                return auth_header
            end

            local token = read_token()
            if not token then
                ngx.log(ngx.ERR, "Failed to read the token file")
                return nil
            end

            local auth_header = "Bearer " .. token
            ngx.shared.cache:set("auth_header", auth_header, token_cache_expiration)
            ngx.log(ngx.NOTICE, "Token successfully loaded")
            return auth_header
        end

        get_auth_header()
    }

    server {

        server_name docker-mirror;

        proxy_intercept_errors on;
        recursive_error_pages on;
        error_page 401 = @handle_unauth;
        error_page 403 = @handle_unauth;
        proxy_set_header Host ${UPSTREAM_HOST};
        
        proxy_buffer_size ${PROXY_BUFFER_SIZE};
        proxy_buffers ${PROXY_BUFFERS};
        proxy_busy_buffers_size ${PROXY_BUSY_BUFFERS_SIZE};
        large_client_header_buffers ${LARGE_CLIENT_HEADER_BUFFERS};

        access_by_lua_block {
            local token = get_auth_header()

            if token then
                ngx.req.set_header("Authorization", token)
            else
                ngx.log(ngx.ERR, "Failed to set the authorization token")
            end
        }

        location @handle_unauth {
            internal;
            
            rewrite_by_lua_block {
                local retry_attempt = tonumber(ngx.req.get_headers()["X-Retry-Attempt"]) or 1
                local max_retry_attempts = tonumber(os.getenv("MAX_AUTH_RETRY_ATTEMPTS")) or 3

                ngx.log(ngx.ERR, "401/403 detected, retrying after refreshing the token (Attempt: " .. retry_attempt .. "/" .. max_retry_attempts .. ")")

                if retry_attempt < max_retry_attempts then
                    ngx.req.set_header("X-Retry-Attempt", retry_attempt + 1)

                    local token = get_auth_header(true)
                    if token then
                        ngx.req.set_header("Authorization", token)
                        ngx.exec(ngx.var.request_uri)
                    else
                        ngx.log(ngx.ERR, "Failed to refresh token on retry attempt #" .. retry_attempt)
                    end
                else
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("Access denied after multiple token refresh attempts")
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            }
        }

        # Main base URI
        location / {
            proxy_pass ${UPSTREAM_PROTOCOL}://${UPSTREAM_HOST};
        }

        # Base URI for /v2/
        location ~ /v2/ {
            proxy_pass ${UPSTREAM_PROTOCOL}://${UPSTREAM_HOST};

            # URL rewriting specific to /v2/
            set $base_rewrite_path ${BASE_REWRITE_PATH};
            if ($request_uri ~* "^/v2/(.+)$") {
                rewrite ^/v2/(.+)$ /v2/$base_rewrite_path/$1 break;
            }
        }
    }
}
